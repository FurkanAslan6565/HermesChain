{
	"compiler": {
		"version": "0.8.7+commit.e28d00a7"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "patient",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "clinic",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "timestamp",
						"type": "uint256"
					}
				],
				"name": "InvocieAccepted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "patient",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "clinic",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "timestamp",
						"type": "uint256"
					}
				],
				"name": "InvocieCreated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_clinicHash",
						"type": "bytes32"
					},
					{
						"internalType": "bool",
						"name": "approveReject",
						"type": "bool"
					}
				],
				"name": "approveInvoice",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "patientAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "bytes32",
						"name": "patientCategory",
						"type": "bytes32"
					},
					{
						"internalType": "bool",
						"name": "groupA",
						"type": "bool"
					}
				],
				"name": "createInvoice",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "message",
						"type": "string"
					}
				],
				"name": "getHash",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "id",
						"type": "bytes32"
					}
				],
				"name": "getInvoiceById",
				"outputs": [
					{
						"components": [
							{
								"internalType": "bytes32",
								"name": "invoiceId",
								"type": "bytes32"
							},
							{
								"internalType": "bytes32",
								"name": "typeOfPatient",
								"type": "bytes32"
							},
							{
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "patient",
								"type": "address"
							},
							{
								"internalType": "enum Hermes.Status",
								"name": "status",
								"type": "uint8"
							}
						],
						"internalType": "struct Hermes.Invoice",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "patient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "getInvoiceByPatient",
				"outputs": [
					{
						"components": [
							{
								"internalType": "bytes32",
								"name": "invoiceId",
								"type": "bytes32"
							},
							{
								"internalType": "bytes32",
								"name": "typeOfPatient",
								"type": "bytes32"
							},
							{
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "patient",
								"type": "address"
							},
							{
								"internalType": "enum Hermes.Status",
								"name": "status",
								"type": "uint8"
							}
						],
						"internalType": "struct Hermes.Invoice",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_clinicHash",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "clinicAddress",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "groupA",
						"type": "bool"
					}
				],
				"name": "registerClinic",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "categoryHash",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "setPrice",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "patient",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "newCategory",
						"type": "bytes32"
					}
				],
				"name": "setUsersCategory",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"approveInvoice(bytes32,bool)": {
					"notice": "Bu fonksiyon hasta tarafından çağrılabilir Fatura önceden oluşturulmuş olmalıdır Fatura durumu beklemede olmalıdır İşlev faturayı kabul eder veya reddeder ve onu arşivle"
				},
				"createInvoice(address,uint256,bytes32,bool)": {
					"notice": "Bu işlev klinik tarafından çağrılabilir Clinic, hasta kategorisi sınırının 3 katından fazla fatura oluşturamaz eğer hastalar ilk kez gelirse, kategorisi kaydedilecektir İşlev, kullanıcının o kategoriye ait olup olmadığını kontrol eder PatientAddress adres fatura sahibi"
				},
				"registerClinic(bytes32,address,bool)": {
					"notice": "Bu Fonksiyon Kliniklerden çağrılabilir zaten kayıtlı bir klinik varsa, sözleşme güvenlik nedeniyle tekrar kaydolmasına izin vermez"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"hermesss.sol": "Hermes"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9",
			"license": "MIT",
			"urls": [
				"bzz-raw://e12cbaa7378fd9b62280e4e1d164bedcb4399ce238f5f98fc0eefb7e50577981",
				"dweb:/ipfs/QmXRoFGUgfsaRkoPT5bxNMtSayKTQ8GZATLPXf69HcRA51"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
			"license": "MIT",
			"urls": [
				"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
				"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
			]
		},
		"hermesss.sol": {
			"keccak256": "0x58d47582fea87e2a212e227f24c4ca9c852d419d3d9bdd4c5191e549552050ce",
			"license": "MIT",
			"urls": [
				"bzz-raw://4269dd2c4ea40ea6e130a5157ef39f77010191d8f79f823e8dbeb525fb1149a1",
				"dweb:/ipfs/QmQhS6r6ncrVEJEwRLxcKjdmGaDSW3UCr5qiUDJTZEP7hc"
			]
		}
	},
	"version": 1
}